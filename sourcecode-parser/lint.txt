api.go:11:56: unused-parameter: parameter 'r' seems to be unused, consider removing or renaming it as _ (revive)
api.go:13:28: Error return value of `(*encoding/json.Encoder).Encode` is not checked (errcheck)
api.go:30:28: Error return value of `(*encoding/json.Encoder).Encode` is not checked (errcheck)
api.go:39:2: G114: Use of net/http serve function that has no support for setting timeouts (gosec)
api.go:39:21: Error return value of `http.ListenAndServe` is not checked (errcheck)
construct.go:8:2: SA1019: "io/ioutil" has been deprecated since Go 1.19: As of Go 1.16, the same functionality is now provided by package [io] or package [os], and those implementations should be preferred in new code. See the specific function documentation for details. (staticcheck)
construct.go:88: File is not `gofumpt`-ed (gofumpt)
construct.go:93:15: ST1003: var methodId should be methodID (stylecheck)
construct.go:93:15: var-naming: var methodId should be methodID (revive)
construct.go:101:4: ifElseChain: rewrite if-else to switch statement (gocritic)
construct.go:124:33: unnecessary conversion (unconvert)
construct.go:137:15: var-naming: var methodId should be methodID (revive)
construct.go:137:15: ST1003: var methodId should be methodID (stylecheck)
construct.go:146:24: unnecessary conversion (unconvert)
construct.go:181: File is not `gofumpt`-ed (gofumpt)
construct.go:188:23: unnecessary conversion (unconvert)
construct.go:205:125: Comment should end in a period (godot)
construct.go:206:23: unused-parameter: parameter 'node' seems to be unused, consider removing or renaming it as _ (revive)
construct.go:206:23: `generateMethodID` - `node` is unused (unparam)
construct.go:206:42: `generateMethodID` - `sourceCode` is unused (unparam)
construct.go:206:42: unused-parameter: parameter 'sourceCode' seems to be unused, consider removing or renaming it as _ (revive)
construct.go:213:68: Comment should end in a period (godot)
construct.go:214:1: unnamedResult: consider giving a name to these results (gocritic)
construct.go:234:3: commentedOutCode: may want to remove commented-out code (gocritic)
construct.go:234:3: commentFormatting: put a space between `//` and comment text (gocritic)
construct.go:245:1: unnamedResult: consider giving a name to these results (gocritic)
construct.go:245:1: paramTypeCombine: func(node *sitter.Node, sourceCode []byte, packageName string, className string) (string, string) could be replaced with func(node *sitter.Node, sourceCode []byte, packageName, className string) (string, string) (gocritic)
construct.go:245:62: `extractMethodName` - `packageName` is unused (unparam)
construct.go:245:62: unused-parameter: parameter 'packageName' seems to be unused, consider removing or renaming it as _ (revive)
construct.go:245:82: `extractMethodName` - `className` is unused (unparam)
construct.go:245:82: unused-parameter: parameter 'className' seems to be unused, consider removing or renaming it as _ (revive)
construct.go:246:6: var-naming: var methodId should be methodID (revive)
construct.go:246:6: ST1003: var methodId should be methodID (stylecheck)
construct.go:259:17: SA4010: this result of append is never used, except maybe in other appends (staticcheck)
construct.go:276: File is not `gofumpt`-ed (gofumpt)
construct.go:304:70: unused-parameter: parameter 'err' seems to be unused, consider removing or renaming it as _ (revive)
construct.go:336:3: exitAfterDefer: log.Fatal will exit, and `defer parser.Close()` will not run (gocritic)
construct.go:344:59: unnecessary conversion (unconvert)
construct.go:348:3: deferInLoop: Possible resource leak, 'defer' is called in the 'for' loop (gocritic)
construct.go:350: File is not `gofumpt`-ed (gofumpt)
construct.go:355:37: unnecessary conversion (unconvert)
construct.go:358:2: commentedOutCode: may want to remove commented-out code (gocritic)
construct.go:358:2: commentFormatting: put a space between `//` and comment text (gocritic)
construct.go:358: File is not `gofumpt`-ed (gofumpt)
construct.go:360:2: commentedOutCode: may want to remove commented-out code (gocritic)
go.mod:9:1: local replacement are not allowed: queryparser (gomoddirectives)
lsp.go:11:6: func `mains` is unused (unused)
lsp.go:41:16: Error return value of `reader.ReadString` is not checked (errcheck)
main.go:13:2: ineffectual assignment to sourceDirectory (ineffassign)
main.go:13:2: assigned to sourceDirectory, but reassigned without using the value (wastedassign)
main.go:25:10: Error return value of `in.ReadString` is not checked (errcheck)
source_sink.go:24:22: json(snake): got 'isConnected' want 'is_connected' (tagliatelle)
source_sink.go:25:22: json(snake): got 'sourceMethod' want 'source_method' (tagliatelle)
source_sink.go:26:22: json(snake): got 'sourceLine' want 'source_line' (tagliatelle)
source_sink.go:27:22: json(snake): got 'sinkMethod' want 'sink_method' (tagliatelle)
source_sink.go:28:22: json(snake): got 'sinkLine' want 'sink_line' (tagliatelle)
source_sink.go:31:1: paramTypeCombine: func(graph *CodeGraph, currentNode *GraphNode, targetNode *GraphNode, visited map[string]bool) bool could be replaced with func(graph *CodeGraph, currentNode, targetNode *GraphNode, visited map[string]bool) bool (gocritic)
source_sink.go:87:1: paramTypeCombine: func(key string, val string) string could be replaced with func(key, val string) string (gocritic)
